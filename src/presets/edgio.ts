import { promises as fsp } from "node:fs";
import { resolve, dirname } from "pathe";
import type { PackageJson } from "pkg-types";
import { defineNitroPreset } from "../preset";

export const edgio = defineNitroPreset({
  extends: "node-server",
  commands: {
    deploy: "cd ./ && npm run deploy",
    preview: "cd ./ && npm run preview",
  },
  hooks: {
    async compiled(nitro) {
      /**
       * Output directory structure:
       * | .edgio (generated by Edgio CLI)
       * | edgio/prod.js
       * | public/*
       * | server/*
       * | edgio.config.js
       * | package.json
       * | routes.js
       */

      // Write edgio.config.js
      await writeFile(
        resolve(nitro.options.output.dir, "edgio.config.js"),
        `module.exports = ${JSON.stringify(
          {
            connector: "./edgio",
            routes: "./routes.js",
          },
          null,
          2
        )}`
      );

      // Write routes.js
      await writeFile(
        resolve(nitro.options.output.dir, "routes.js"),
        `
import { edgioRoutes } from "@edgio/core";
import { isProductionBuild } from "@edgio/core/environment";
import { Router } from "@edgio/core/router";

const router = new Router();
router.match("/:path*", ({ renderWithApp }) => {
  renderWithApp();
});
if (isProductionBuild()) {
  router.static("public");
}
router.use(edgioRoutes);

export default router;
        `.trim()
      );

      // Write edgio/build.js
      await writeFile(
        resolve(nitro.options.output.dir, "edgio/build.js"),
        `
const path = require("path");
const deploy = require("@edgio/core/deploy");
const FrameworkBuildError = require("@edgio/core/errors/FrameworkBuildError");

function _interopDefaultCompat(e) {
  return e && typeof e === "object" && "default" in e ? e.default : e;
}

const FrameworkBuildError__default =
  /*#__PURE__*/ _interopDefaultCompat(FrameworkBuildError);

const appDir = process.cwd();
async function build(options) {
  const builder = new deploy.DeploymentBuilder();
  builder.clearPreviousBuildOutput();
  if (!options.skipFramework) {
    const command = "node ./server/index.mjs";
    try {
      await builder.exec(command);
    } catch (e) {
      throw new FrameworkBuildError__default("Nitropack", command, e);
    }
  }
  builder.addJSAsset(path.join(appDir, "server"));
  await builder.build();
}

module.exports = build;
        `.trim()
      );

      // Write edgio/dev.js
      await writeFile(
        resolve(nitro.options.output.dir, "edgio/dev.js"),
        `
const dev$1 = require("@edgio/core/dev");

function dev() {
  const isWin = process.platform === "win32";
  return dev$1.createDevServer({
    label: "Nitropack",
    command: (port) =>
      isWin
        ? ${"`set PORT=${port} && node ./server/index.mjs`"}
        : ${"`PORT=${port} node ./server/index.mjs`"},
    ready: [/localhost:/i],
  });
}

module.exports = dev;
        `.trim()
      );

      // Write edgio/init.js
      await writeFile(
        resolve(nitro.options.output.dir, "edgio/init.js"),
        `
const path = require("path");
const deploy = require("@edgio/core/deploy");

function init() {
  new deploy.DeploymentBuilder(process.cwd())
    .addDefaultAppResources(path.join(__dirname, "default-app"))
    .addDefaultEdgioScripts();
}

module.exports = init;
        `.trim()
      );

      // Write edgio/prod.js
      await writeFile(
        resolve(nitro.options.output.dir, "edgio/prod.js"),
        `
const path = require("path");
const fs = require("fs");

async function prod(port) {
  const appFilePath = path.resolve("server", "index.mjs");
  if (fs.existsSync(appFilePath)) {
    process.env.NITRO_PORT = port.toString();
    return await import(
      /* webpackIgnore: true */
      appFilePath
    );
  }
}

module.exports = prod;
        `.trim()
      );

      // Write and prepare package.json for deployment
      await writeFile(
        resolve(nitro.options.output.dir, "package.json"),
        JSON.stringify(
          <PackageJson>{
            name: "nitropack-edgio-output",
            version: "1.0.0",
            private: true,
            scripts: {
              build: "npm i && edgio build",
              deploy: "npm i && edgio deploy",
              start: "npm i && edgio run --production",
              preview: "npm i && edgio build && edgio run --production",
            },
            devDependencies: {
              "@edgio/cli": "^7",
              "@edgio/core": "^7",
            },
          },
          null,
          2
        )
      );
      await writeFile(
        resolve(nitro.options.output.dir, "package-lock.json"),
        ""
      );
    },
  },
});

async function writeFile(path: string, contents: string) {
  await fsp.mkdir(dirname(path), { recursive: true });
  await fsp.writeFile(path, contents, "utf8");
}
